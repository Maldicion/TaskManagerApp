{"ast":null,"code":"import { ActivatedRoute, Router } from '@angular/router';\nimport { TaskService } from 'src/app/task.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/task.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\n\nconst _c0 = function (a1) {\n  return [\"/lists\", a1];\n};\n\nfunction TaskViewComponent_a_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"a\", 9)(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const list_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction1(2, _c0, list_r3._id));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(list_r3.title);\n  }\n}\n\nconst _c1 = function (a0) {\n  return {\n    \"complete\": a0\n  };\n};\n\nconst _c2 = function (a1, a3) {\n  return [\"/lists\", a1, \"edit-task\", a3];\n};\n\nfunction TaskViewComponent_div_10_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 25);\n    i0.ɵɵlistener(\"click\", function TaskViewComponent_div_10_div_15_Template_div_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const task_r7 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return ctx_r8.onTaskClick(task_r7);\n    });\n    i0.ɵɵelementStart(1, \"div\", 26)(2, \"p\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 27)(5, \"div\", 28)(6, \"div\", 29);\n    i0.ɵɵelement(7, \"i\", 30);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"div\", 31);\n    i0.ɵɵlistener(\"click\", function TaskViewComponent_div_10_div_15_Template_div_click_8_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const task_r7 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return ctx_r10.TaskDeleteClick(task_r7._id);\n    });\n    i0.ɵɵelementStart(9, \"div\", 29);\n    i0.ɵɵelement(10, \"i\", 32);\n    i0.ɵɵelementEnd()()()();\n  }\n\n  if (rf & 2) {\n    const task_r7 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(3, _c1, task_r7.completed));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(task_r7.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction2(5, _c2, ctx_r4.selectedListId, task_r7._id));\n  }\n}\n\nfunction TaskViewComponent_div_10_h2_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h2\", 33);\n    i0.ɵɵtext(1, \"There Are No Tasks Available!\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction TaskViewComponent_div_10_h2_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h2\", 33);\n    i0.ɵɵtext(1, \"Click the Add Button To Create New Tasks!\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c3 = function (a1) {\n  return [\"/edit-list\", a1];\n};\n\nfunction TaskViewComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 10)(2, \"h1\", 11);\n    i0.ɵɵtext(3, \"Task\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 12)(5, \"div\", 13)(6, \"button\", 14)(7, \"span\", 15);\n    i0.ɵɵelement(8, \"i\", 16);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(9, \"div\", 17)(10, \"div\", 18)(11, \"a\", 19);\n    i0.ɵɵtext(12, \" Edit \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"a\", 20);\n    i0.ɵɵlistener(\"click\", function TaskViewComponent_div_10_Template_a_click_13_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.OnDeleteClick();\n    });\n    i0.ɵɵtext(14, \" Delete \");\n    i0.ɵɵelementEnd()()()()();\n    i0.ɵɵtemplate(15, TaskViewComponent_div_10_div_15_Template, 11, 8, \"div\", 21);\n    i0.ɵɵtemplate(16, TaskViewComponent_div_10_h2_16_Template, 2, 0, \"h2\", 22);\n    i0.ɵɵtemplate(17, TaskViewComponent_div_10_h2_17_Template, 2, 0, \"h2\", 22);\n    i0.ɵɵelementStart(18, \"button\", 23);\n    i0.ɵɵelement(19, \"img\", 24);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(11);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction1(4, _c3, ctx_r1.selectedListId));\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.tasks);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.tasks.length === 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.tasks.length === 0);\n  }\n}\n\nfunction TaskViewComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h1\", 3);\n    i0.ɵɵtext(2, \"Task\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"h2\", 33);\n    i0.ɵɵtext(4, \"Please Select the list form the sidebar!\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nexport let TaskViewComponent = /*#__PURE__*/(() => {\n  class TaskViewComponent {\n    constructor(taskService, route, router) {\n      this.taskService = taskService;\n      this.route = route;\n      this.router = router;\n    }\n\n    ngOnInit() {\n      this.route.params.subscribe(params => {\n        // console.log(params.listId);s\n        if (params.listId) {\n          this.selectedListId = params.listId;\n          this.taskService.getTasks(params.listId).subscribe(tasks => {\n            this.tasks = tasks;\n          });\n        } else {\n          this.tasks = undefined;\n        }\n      });\n      this.taskService.getList().subscribe(list => {\n        this.lists = list;\n      });\n    }\n\n    onTaskClick(task) {\n      // We want to set the task completed\n      return this.taskService.complete(task).subscribe(() => {\n        console.log(\"Completed Successfully\");\n        task.completed = !task.completed;\n      });\n    }\n\n    OnDeleteClick() {\n      this.taskService.deleteList(this.selectedListId).subscribe(res => {\n        this.router.navigate(['/lists']);\n        console.log(res);\n      });\n    }\n\n    TaskDeleteClick(id) {\n      this.taskService.deleteTask(this.selectedListId, id).subscribe(res => {\n        // this.router.navigate(['./']);\n        this.tasks = this.tasks.filter(val => val._id !== id);\n      });\n    }\n\n  }\n\n  TaskViewComponent.ɵfac = function TaskViewComponent_Factory(t) {\n    return new (t || TaskViewComponent)(i0.ɵɵdirectiveInject(i1.TaskService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router));\n  };\n\n  TaskViewComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TaskViewComponent,\n    selectors: [[\"app-task-view\"]],\n    decls: 12,\n    vars: 3,\n    consts: [[1, \"main-box\"], [1, \"task-manager-container\"], [1, \"sidebar\"], [1, \"display-4\", \"primary-text\"], [1, \"list-menu\"], [\"class\", \"list-items\", \"routerLinkActive\", \"is-active\", 3, \"routerLink\", 4, \"ngFor\", \"ngForOf\"], [\"routerLink\", \"/new-list\", 1, \"button\", \"btnprimary\", \"is-primary\"], [1, \"task-list-container\"], [4, \"ngIf\"], [\"routerLinkActive\", \"is-active\", 1, \"list-items\", 3, \"routerLink\"], [1, \"top-bar\"], [1, \"title\", \"display-4\", \"primary-text\"], [1, \"dropdown\", \"is-hoverable\"], [1, \"dropdown-trigger\"], [\"aria-haspopup\", \"true\", 1, \"button\"], [1, \"icon\", \"is-small\"], [\"aria-hidden\", \"true\", 1, \"fas\", \"fa-cog\"], [\"id\", \"dropdown-menu4\", \"role\", \"menu\", 1, \"dropdown-menu\"], [1, \"dropdown-content\"], [1, \"dropdown-item\", 3, \"routerLink\"], [1, \"dropdown-item\", \"has-text-danger\", 3, \"click\"], [\"class\", \"task\", 3, \"ngClass\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"txt my-4 display-6\", 4, \"ngIf\"], [\"routerLink\", \"./new-task\", 1, \"circle-add-button\", \"button\", \"is-primary\"], [\"src\", \"../../../assets/plus-icon.svg\"], [1, \"task\", 3, \"ngClass\", \"click\"], [1, \"task-text\"], [1, \"task-buttons\"], [1, \"button\", \"mx-3\", 3, \"routerLink\"], [1, \"icon\"], [1, \"fas\", \"fa-edit\"], [1, \"button\", \"is-danger\", 3, \"click\"], [1, \"fas\", \"fa-trash\"], [1, \"txt\", \"my-4\", \"display-6\"]],\n    template: function TaskViewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h1\", 3);\n        i0.ɵɵtext(4, \" List \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 4);\n        i0.ɵɵtemplate(6, TaskViewComponent_a_6_Template, 3, 4, \"a\", 5);\n        i0.ɵɵelementStart(7, \"button\", 6);\n        i0.ɵɵtext(8, \"+ New List\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(9, \"div\", 7);\n        i0.ɵɵtemplate(10, TaskViewComponent_div_10_Template, 20, 6, \"div\", 8);\n        i0.ɵɵtemplate(11, TaskViewComponent_div_11_Template, 5, 0, \"div\", 8);\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngForOf\", ctx.lists);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.tasks);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.tasks);\n      }\n    },\n    directives: [i3.NgForOf, i2.RouterLinkWithHref, i2.RouterLinkActive, i2.RouterLink, i3.NgIf, i3.NgClass],\n    styles: [\".task-manager-container[_ngcontent-%COMP%]{display:flex;width:100%;height:100%;max-width:1000px;max-height:680px}.sidebar[_ngcontent-%COMP%]{display:flex;flex-direction:column;background-color:#fff;width:250px;padding:40px;border-top-left-radius:10px;border-bottom-left-radius:10px}.top-bar[_ngcontent-%COMP%]{display:flex}.top-bar[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]{flex-grow:1;margin:5px}.task-list-container[_ngcontent-%COMP%]{position:relative;display:flex;flex-direction:column;background-color:#f0f8ff;flex-grow:1;padding:40px;border-top-right-radius:10px;border-bottom-right-radius:10px}.list-menu[_ngcontent-%COMP%]{position:relative;display:flex;flex-direction:column;align-items:center;margin-top:15px;flex-grow:1}.list-items[_ngcontent-%COMP%]{display:flex;align-items:center;width:100%;border-radius:5px;padding:10px;text-decoration:none;color:#5f5f5f;margin-top:2.5px;margin-bottom:2.5px}.list-items[_ngcontent-%COMP%]:hover{cursor:pointer;background-color:#e9e9e9;opacity:.9}.list-items[_ngcontent-%COMP%]:active{background-color:#cff8ef;color:#006450}.btnprimary[_ngcontent-%COMP%]{color:#fff;background-color:#10ac8d;padding:6px 40px;border:0px;position:absolute;bottom:0px}.task[_ngcontent-%COMP%]{display:flex;background-color:#fff;padding:15px 20px;border-radius:5px;margin-top:10px;transition:box-shadow .2s ease,transform .2s ease;align-items:center}.task-text[_ngcontent-%COMP%]{display:flex;flex-grow:1}.task-buttons[_ngcontent-%COMP%]{opacity:0;transition:opacity .2s,transform .2s;transform:scale(.7)}p[_ngcontent-%COMP%]{margin:0}.complete[_ngcontent-%COMP%]   .task-text[_ngcontent-%COMP%]{text-decoration:line-through}.task[_ngcontent-%COMP%]:not(.complete):hover{box-shadow:0 0 0 5px #eee;cursor:pointer}.task[_ngcontent-%COMP%]:not(.complete):hover   .task-buttons[_ngcontent-%COMP%]{cursor:pointer;opacity:1;transform:scale(1)}.task[_ngcontent-%COMP%]:not(.complete):active{transform:scale(.95)}.circle-add-button[_ngcontent-%COMP%]{position:absolute;height:50px;width:50px;background-color:#10ac8d;border:0px;bottom:30px;right:30px;border-radius:50%}.txt[_ngcontent-%COMP%]{color:#888;font-size:36px}\"]\n  });\n  return TaskViewComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}
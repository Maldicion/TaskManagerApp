{"ast":null,"code":"import { HttpErrorResponse, HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { catchError, empty, Observable, Subject, throwError } from 'rxjs';\nimport { tap, switchMap } from 'rxjs/operators';\nimport { AuthService } from './auth.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport let WebReqInterceptor = /*#__PURE__*/(() => {\n  class WebReqInterceptor {\n    constructor(authService) {\n      this.authService = authService;\n      this.accessTokenRefreshed = new Subject();\n    }\n\n    intercept(req, next) {\n      req = this.addAuthHeader(req); // call next() and handle the response\n\n      return next.handle(req).pipe(catchError(error => {\n        console.log(error);\n\n        if (error.status === 401 && !this.refreshingAccessToken) {\n          // 401 error => it means we are unauthorised\n          // refresh the access token\n          return this.refreshAccessToken().pipe(switchMap(() => {\n            req = this.addAuthHeader(req);\n            return next.handle(req);\n          }), catchError(err => {\n            console.log(err);\n            this.authService.logout();\n            return empty();\n          }));\n        }\n\n        return throwError(error);\n      }));\n    }\n\n    refreshAccessToken() {\n      if (this.refreshingAccessToken) {\n        return new Observable(observer => {\n          this.accessTokenRefreshed.subscribe(() => {\n            // this code will run when access token is refreshed\n            observer.next();\n            observer.complete();\n          });\n        });\n      } else {\n        // We want to call a method in the auth service to refresh the access token\n        this.refreshingAccessToken = true;\n        return this.authService.getNewAccessToken().pipe(tap(() => {\n          console.log(\"Access Token Refreshed!!!\");\n          this.refreshingAccessToken = false;\n          this.accessTokenRefreshed.next('');\n        }));\n      }\n    }\n\n    addAuthHeader(req) {\n      // get the access token\n      const token = this.authService.getAccessToken();\n\n      if (token) {\n        // append the access token to the header\n        return req.clone({\n          setHeaders: {\n            'x-access-token': token\n          }\n        });\n      }\n\n      return req;\n    }\n\n  }\n\n  WebReqInterceptor.ɵfac = function WebReqInterceptor_Factory(t) {\n    return new (t || WebReqInterceptor)(i0.ɵɵinject(i1.AuthService));\n  };\n\n  WebReqInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WebReqInterceptor,\n    factory: WebReqInterceptor.ɵfac,\n    providedIn: 'root'\n  });\n  return WebReqInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}